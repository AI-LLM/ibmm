from __future__ import annotations
import sys, os, time
from http.server import SimpleHTTPRequestHandler, ThreadingHTTPServer
from functools import partial
from urllib.parse import urlparse
from pathlib import Path
import importlib

HOST = os.environ.get("IBMM_DEV_HOST", "127.0.0.1")
PORT = int(os.environ.get("IBMM_DEV_PORT", "8765"))

def common_docroot(paths):
    # 计算多个路径的公共上层目录
    paths = [str(Path(p).resolve()) for p in paths]
    return Path(os.path.commonpath(paths))

def compute_signature(graph_file: Path, ibmm_pkg_dir: Path, index_html: Path | None) -> tuple[int, int, int]:
    g = graph_file.stat().st_mtime_ns if graph_file.exists() else 0
    idx = index_html.stat().st_mtime_ns if (index_html and index_html.exists()) else 0
    agg = 0
    for p in ibmm_pkg_dir.rglob("*.py"):
        try:
            agg ^= p.stat().st_mtime_ns
        except FileNotFoundError:
            pass
    return (g, agg, idx)

class DevHandler(SimpleHTTPRequestHandler):
    # 仅扩展 /events；其他交给父类（纯静态）
    def do_GET(self):
        parsed = urlparse(self.path)
        if parsed.path == "/events":
            self.send_response(200)
            self.send_header("Content-Type", "text/event-stream")
            self.send_header("Cache-Control", "no-cache")
            self.send_header("Connection", "keep-alive")
            self.end_headers()
            last = compute_signature(self.server.graph_file, self.server.ibmm_pkg_dir, self.server.index_html)
            idle = 0
            try:
                while True:
                    time.sleep(0.5)
                    cur = compute_signature(self.server.graph_file, self.server.ibmm_pkg_dir, self.server.index_html)
                    if cur != last:
                        self.wfile.write(b"data: reload\n\n")
                        self.wfile.flush()
                        last = cur
                        idle = 0
                        continue
                    idle += 1
                    if idle >= 30:  # ~15s 心跳
                        self.wfile.write(b": keep-alive\n\n")
                        self.wfile.flush()
                        idle = 0
            except (BrokenPipeError, ConnectionResetError):
                pass
            return
        # 其他全部交给静态文件处理
        return super().do_GET()

class DevHTTPServer(ThreadingHTTPServer):
    # 扩展几个属性，便于 handler 访问
    def __init__(self, server_address, RequestHandlerClass, graph_file: Path, ibmm_pkg_dir: Path, index_html: Path | None):
        super().__init__(server_address, RequestHandlerClass)
        self.graph_file = graph_file
        self.ibmm_pkg_dir = ibmm_pkg_dir
        self.index_html = index_html
    daemon_threads = True

def run(graph_path_str: str):
    graph_file = Path(graph_path_str).resolve()
    if not graph_file.exists():
        print(f"[ibmm-dev] graph file not found: {graph_file}")
        sys.exit(1)

    # import ibmm 以获取包目录
    try:
        ibmm = importlib.import_module("ibmm")
    except Exception as e:
        print("[ibmm-dev] Cannot import 'ibmm'. Ensure it is importable (PYTHONPATH).")
        raise
    ibmm_pkg_dir = Path(ibmm.__file__).resolve().parent

    # 选择静态 docroot：覆盖 index.html、ibmm 包、以及图文件
    # 首选：index.html 所在目录；若不存在，就取三者公共上级
    candidate_index = graph_file.parent / "index.html"
    if candidate_index.exists():
        docroot = candidate_index.parent.resolve()
        index_html = candidate_index
    else:
        docroot = common_docroot([graph_file.parent, ibmm_pkg_dir.parent])
        # 如果 docroot 下有 index.html 就用它
        idx = docroot / "index.html"
        index_html = idx if idx.exists() else None

    handler_cls = partial(DevHandler, directory=str(docroot))
    httpd = DevHTTPServer((HOST, PORT), handler_cls, graph_file=graph_file, ibmm_pkg_dir=ibmm_pkg_dir, index_html=index_html)

    # 计算模块路径，便于给出 URL（graphs/foo.py -> graphs.foo）
    try:
        rel = graph_file.relative_to(docroot)
        mod = str(rel).replace(os.sep, ".")
        if mod.endswith(".py"): mod = mod[:-3]
    except ValueError:
        # 不在 docroot 下，退化为文件名
        mod = graph_file.stem

    url = f"http://{HOST}:{PORT}/?graph={mod}"
    print(f"[ibmm-dev] Serving {docroot}  (index={'present' if index_html else 'generated by you'})")
    print(f"[ibmm-dev] Graph module: {mod}")
    print(f"[ibmm-dev] Open: {url}")
    print("[ibmm-dev] Auto-reload on changes to the graph, ibmm/*.py, or index.html.")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n[ibmm-dev] bye.")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python -m ibmm_dev path/to/graphs/example_mixed.py")
        sys.exit(2)
    run(sys.argv[1])